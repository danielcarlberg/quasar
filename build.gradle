buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.2'
        classpath 'net.saliman:gradle-cobertura-plugin:2.5.4'
        classpath 'gradle.plugin.org.javamodularity:moduleplugin:1.0.1'
    }
}

plugins {
  id "com.dorongold.task-tree" version "1.3.1"
  id "com.github.ben-manes.versions" version "0.20.0"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.javamodularity.moduleplugin'

    sourceCompatibility = '10'
    targetCompatibility = '10' // gradle 4.10.2 does not support JDK 11 targets

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    group               = "co.paralleluniverse.fork"
    version             = "0.8.1"
    status              = "integration"
    description         = "Fibers, Channels and Actors for the JVM"
    ext.url             = "https://github.com/danielcarlberg/quasar"
    ext.vendor          = "Fork from Parallel Universe Software Co."
    ext.licenseName1    = "The GNU Lesser General Public License, version 3"
    ext.licenseUrl1     = "http://www.gnu.org/licenses/lgpl-3.0.txt"
    ext.licenseName2    = "Eclipse Public License - v 1.0"
    ext.licenseUrl2     = "http://www.eclipse.org/legal/epl-v10.html"
    ext.scmUrl          = "https://github.com/danielcarlberg/quasar"
    ext.scmConnection   = "https://github.com/danielcarlberg/quasar.git"
    ext.distDir         = "$buildDir/dist"
    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
    ext.baselib         = "${rootProject.projectDir}/baselib"
    ext.quasarJar = "${rootProject.projectDir}/quasar-core/build/libs/quasar-core-${version}.jar" // project(':quasar-core').jar.archivePath

    ext.guavaVer  = '26.0-jre'
    ext.asmVer    = '9.6'
    ext.kotlinVer = '1.3.0'

    if (!project.hasProperty("sonatypeUsername") || !project.hasProperty("sonatypePassword")) {
        println "sonatype username or password not set"
        ext.sonatypeUsername = ""
        ext.sonatypePassword = ""
    }

    if (!project.hasProperty('mainClass')) { // must use project.hasProperty() rather than hasProperty in subprojects (gradle bug)
        ext.mainClass = ''
    }

    repositories {
        flatDir {
            dirs baselib
        }
        repositories {
            mavenLocal()
            mavenCentral()
            maven { url "https://oss.sonatype.org/content/repositories/releases" }
            maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
            jcenter()
        }
    }

    configurations.all {
        resolutionStrategy {
            failOnVersionConflict()
        }
    }

    configurations {
        compileOnly
        provided
        timewarp
        // markdownDoclet
        shadowedJar.extendsFrom(runtime)
    }

    sourceSets {
        main {
            compileClasspath += configurations.compileOnly + configurations.provided
        }

        test {
            compileClasspath += configurations.compileOnly + configurations.provided
            runtimeClasspath += configurations.provided
        }

        jmh {
            compileClasspath += main.compileClasspath + main.output + test.compileClasspath + test.output
            runtimeClasspath += compileClasspath + main.runtimeClasspath + test.runtimeClasspath
        }
    }

    compileJmhJava {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    dependencies {
        compile("io.dropwizard.metrics:metrics-core:4.1.0-rc2") {
            exclude group: 'org.slf4j', module: '*'
        }
        compile "io.dropwizard.metrics:metrics-jmx:4.1.0-rc2"
        provided "org.apache.ant:ant:1.10.5"
        compile 'com.google.errorprone:error_prone_annotations:2.3.2'
        compile ("com.google.guava:guava:$guavaVer") {
            exclude group: 'com.google.errorprone', module: '*'
            exclude group: 'org.checkerframework', module: 'checker-qual'
        }
        timewarp 'co.paralleluniverse:timewarp:0.2.0-SNAPSHOT'
        testCompile 'co.paralleluniverse:timewarp:0.2.0-SNAPSHOT'
        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testCompile('junit:junit:4.12') {
            exclude group: 'org.hamcrest', module: '*'
        }
        testCompile('com.google.truth:truth:0.42') {
            exclude group: 'com.google.guava', module: 'guava'
            exclude group: 'com.google.errorprone', module: '*'
            exclude group: 'junit', module: 'junit'
        }
        testCompile("org.mockito:mockito-core:2.23.0") {
            exclude group: "org.ow2.asm", module: '*'
            exclude group: "net.bytebuddy", module: '*'
        }
        testRuntime "net.bytebuddy:byte-buddy:1.9.2" // for Mockito
        testCompile "org.ow2.asm:asm:$asmVer"

        jmhCompile 'org.openjdk.jmh:jmh-core:1.21'
        jmhCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.21'

        annotationProcessor 'org.kohsuke.metainf-services:metainf-services:1.8'
        // annotationProcessor 'com.google.auto.service:auto-service:1.0-rc1' // same as metainf-services
        // markdownDoclet "ch.raffael.pegdown-doclet:pegdown-doclet:1.1.1"
    }

    //    tasks.withType(JavaCompile) {
    //        // options.compilerArgs << "-Xlint:unchecked"
    //        // options.compilerArgs << "-Xlint:deprecation"
    //    }

    compileJava.dependsOn processResources
    compileJava {
        if (project.name != 'quasar-kotlin') {
            doLast {
                scanAndInstrument(sourceSets.main, [configurations.provided, configurations.runtime])
            }
        }
    }
    
    test.dependsOn jar

    tasks.withType(Test) {
        useJUnit()
    
        if (project.name != 'quasar-kotlin') {
            moduleOptions {
                runOnClasspath = true
            }
        }
        // jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
        // systemProperty 'co.paralleluniverse.fibers.verifyInstrumentation', 'true'

        // systemProperty "java.util.logging.config.file", "jul.properties"

        // Uncomment and add ${rootProject.projectDir}/log4j.xml, if not present, for logging
        // systemProperty "log4j.configurationFile", "${rootProject.projectDir}/log4j.xml"

        // systemProperty "Log4jContextSelector", "org.apache.logging.log4j.core.async.AsyncLoggerContextSelector"

        // systemProperty 'co.paralleluniverse.debugMode', 'true'
        systemProperty 'co.paralleluniverse.monitoring.flightRecorderLevel', '5'
        systemProperty 'co.paralleluniverse.globalFlightRecorder', 'true'
        systemProperty 'co.paralleluniverse.flightRecorderDumpFile', 'quasar.log'
        systemProperty 'co.paralleluniverse.monitoring.flightRecorderSize', '200000'

        if (project.name != 'quasar-core') {
            jvmArgs "-javaagent:${quasarJar}" // =vdmc (verbose, debug, allow monitors, check class)
        }

        if (project.name != 'quasar-kotlin') { // TODO investigate why kotlin-plugin 1.1.2+ doesn't like it
            jvmArgs "-Xbootclasspath/a:${configurations.timewarp.singleFile}"
            if (System.getenv("TRAVIS") == 'true') {
                jvmArgs "-javaagent:${configurations.timewarp.singleFile}=3" // slow clock down x3
            }
        }

        jvmArgs "-Xmx1024m"
//        jvmArgs "-XX:+TraceClassLoading"
//        jvmArgs "-XX:+TraceClassUnloading"
//        if (!project.ext.java8) {
//            jvmArgs "-XX:MaxPermSize=512m" // Travis is having some trouble with PermGen
//        }
        // jvmArgs "-XX:-UseCompressedOops"

        beforeTest { desc ->
            logger.quiet("Running test: " + desc)
        }

        afterTest { desc, result ->
            if(result.resultType == TestResult.ResultType.FAILURE) {
                logger.quiet("Failed test ${desc.name} [${desc.className}] with exception: ${result.exception}")
                if(result.exception != null) {
                    result.exception.printStackTrace()
                }
            }
        }

        doLast() {
            println "file://" + getReports().getHtml().getDestination() + "/index.html"
        }
    }

    ['run', 'debug'].each { name ->
        project.task(name, type: JavaExec, dependsOn:[testClasses]) {
            classpath = sourceSets.main.runtimeClasspath
            if(project.hasProperty('mainClass')){
                main = project.mainClass
            }
            if(project.hasProperty('args')){
                args project.args.split('\\s+')
            }

            jvmArgs '-Xmx2048m'
            // jvmArgs "-Xbootclasspath/p:${System.getProperty("user.home")}/jsr166.jar"
            // systemProperty 'co.paralleluniverse.fibers.DefaultFiberPool.parallelism', '1'

            systemProperty "log4j.configurationFile", "${rootProject.projectDir}/log4j.xml"
            systemProperty "Log4jContextSelector", "org.apache.logging.log4j.core.async.AsyncLoggerContextSelector"
            // systemProperty 'co.paralleluniverse.fibers.verifyInstrumentation', 'true'
            jvmArgs "-javaagent:${quasarJar}" // =vdmc (verbose, debug, allow monitors, check class)

            // jvmArgs '-XX:+UnlockCommercialFeatures', '-XX:+FlightRecorder', '-XX:StartFlightRecording=duration=60s,filename=recording.jfr,settings=heap'
        }
    }
    debug.debug = true

    project.afterEvaluate {
        run.dependsOn project(':quasar-core').shadowJar

        jar {
            manifest {
                attributes(
                    "Implementation-Title"      :   project.name,
                    "Implementation-Version"    :   version,
                    "Implementation-Vendor"     :   vendor,
                    "Automatic-Module-Name"     :   project.moduleName,
                    "Built-By"                  :   System.getProperty("user.name"),
                )
            }
        }
    }

    tasks.withType(JavaExec) {
        classpath += sourceSets.test.runtimeClasspath + sourceSets.test.output + sourceSets.jmh.runtimeClasspath + sourceSets.jmh.output
    }

    //    tasks.withType(Debug) {
    //        classpath = sourceSets.test.runtimeClasspath
    //    }

    configure (javadoc) {
        classpath += configurations.provided
        
        exclude 'module-info.java' // Temporary, as module path is not added
        
        options {
//          addStringOption('-module-path', classpath.asPath)
            // docletpath = configurations.markdownDoclet.files.asType(List)
            // doclet = 'ch.raffael.doclets.pegdown.PegdownDoclet'
            // addStringOption("parse-timeout", "10")
            addStringOption('Xdoclint:none', '-quiet')
//             addStringOption('-module-path', classpath.asPath)
            // stylesheetFile = rootProject.file('./baselib/javadoc.css')
//            links = [
//                "https://docs.oracle.com/en/java/javase/11/docs/api/",
//                "https://google.github.io/guava/releases/${guavaVer}/api/docs/"
//            ]
        }
    }

    defaultTasks 'build'

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task artifacts {
        group = "Help"
        description = "Displays the artifacts associated with each configuration of " + project
        doFirst {
            configurations.findAll().each { config ->
                println "${config}:"
                // config.allArtifacts.each { file -> println "--- " + file }
                config.allArtifacts.getFiles().each { file -> println "" + file }
                println ' '
            }
        }
    }

    ///////// Publish Artifacts
    apply plugin: 'maven'
    apply plugin: 'signing'

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { deployment -> signing.signPom(deployment) }

                repository(
                    url: ("https://maven.pkg.github.com/danielcarlberg/quasar")) {
                    authentication(userName: System.getenv("GITHUB_ACTOR"), password: System.getenv("GITHUB_TOKEN"))
                }
                pom.project {
                    name project.name
                    packaging 'jar'
                    description project.description
                    url project.url
                    scm {
                        url project.scmUrl
                        connection project.scmConnection
                        developerConnection project.scmConnection
                    }
                    licenses {
                        license {
                            name project.licenseName1
                            url project.licenseUrl1
                            distribution 'repo'
                        }
                        license {
                            name project.licenseName2
                            url project.licenseUrl2
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'pron'
                            name 'Ron Pressler'
                        }
                    }
                }
            }
        }
    }
}

def scanAndInstrument(sset, configs) {
    def cp = '' + sset.output.classesDirs*.toString().join(':') + ':' + sset.output.resourcesDir + ':' + configs*.asPath.join(':')

    ant.taskdef(
        name:'scanSuspendables', classname:'co.paralleluniverse.fibers.instrument.SuspendablesScanner',  classpath: cp)
    ant.scanSuspendables(
        auto: false,
        supersFile:"$sset.output.resourcesDir/META-INF/suspendable-supers",
        append: true) {
//        sset.output.classesDirs.addToAntBuilder(ant, 'fileset', FileCollection.AntType.FileSet)
        fileset(dir: sset.output.classesDir)
    }

    ant.taskdef(name:'instrumentation', classname:'co.paralleluniverse.fibers.instrument.InstrumentationTask', classpath: cp)
    ant.instrumentation(verbose:'true', check:'true', debug:'true') {
//        sset.output.classesDirs.addToAntBuilder(ant, 'fileset', FileCollection.AntType.FileSet) {
        fileset(dir: sset.output.classesDir) {
            exclude(name: 'co/paralleluniverse/fibers/instrument/*.class')
        }
    }
    
    // Filter out the 'requires org.objectweb.asm' from quasar-core's module-info, as it will be shadowed into the jar
    ant.taskdef(name:'filterModules', classname:'co.paralleluniverse.fibers.instrument.ModuleFilterTask', classpath: cp)
    ant.filterModules(module: 'org.objectweb.asm') {
        fileset(dir: sset.output.classesDir)
    }
}

project (':quasar-core') {
    /*
     * see:
     *   https://docs.gradle.org/current/userguide/java_plugin.html
     *   http://examples.javacodegeeks.com/core-java/gradle/gradle-sourcesets-example/
     *   http://stackoverflow.com/questions/15870662/gradle-create-a-new-jar-from-each-sourceset
     *   http://stackoverflow.com/questions/18190614/compiling-a-project-with-different-java-source-compatibility
     *   https://softnoise.wordpress.com/2014/09/07/gradle-sub-project-test-dependencies-in-multi-project-builds/
     */

    apply plugin: 'com.github.johnrengelman.shadow'

    ext.moduleName = 'co.paralleluniverse.quasar.core'
    
    // remove default artifact
    configurations.runtime.artifacts.with { archives ->
        archives.each {
            archives.remove(it)
        }
    }
    
    [jar]*.enabled = false

    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
            }
        }

        test {
            java {
                srcDir 'src/test/java'
            }
        }

        jmh {
            java {
                srcDir 'src/jmh/java'
            }

            compileClasspath += main.output + test.compileClasspath + test.output
            runtimeClasspath += compileClasspath + test.runtimeClasspath
        }

        classloadertest {
            java {
                srcDir 'src/classloadertest/java'
            }

            compileClasspath += main.output + test.compileClasspath
            runtimeClasspath += compileClasspath + test.runtimeClasspath
        }
    }

    configurations {
        archives.extendsFrom runtime
    }

    dependencies {
//        compile ":high-scale-lib"
        compile "org.hdrhistogram:HdrHistogram:2.1.10"
        compile("org.latencyutils:LatencyUtils:2.0.3") {
            exclude group: "org.hdrhistogram", module: '*'
        }
        compile "org.ow2.asm:asm:$asmVer"
        compile "org.ow2.asm:asm-analysis:$asmVer"
        compile "org.ow2.asm:asm-commons:$asmVer"
        compile "org.ow2.asm:asm-util:$asmVer"

        // The exclusions are needed to get asm 5.0.4 whilst Kryo still depends on 5.0.3
        compile "org.objenesis:objenesis:2.6"
        compile("com.esotericsoftware:kryo:4.0.2") {
            exclude group: "org.ow2.asm", module: '*'
            exclude group: "org.objenesis", module: '*'
        }
        compile("de.javakaffee:kryo-serializers:0.42") {
            exclude group: "com.esotericsoftware", module: '*'
            exclude group: "com.esotericsoftware.kryo", module: '*'
        }
        
        // this happens after we've filtered the dependency on ASM from core's module-info
        compileTestJava {
            options.compilerArgs += ["--add-modules", "org.objectweb.asm", "--add-reads", "co.paralleluniverse.quasar.core=org.objectweb.asm"]
        }
        
        provided ('junit:junit:4.12') {
            exclude group: 'org.hamcrest', module: '*'
        }
    }

    configure(project.tasks.compileJava) {
        doLast {
            rootProject.scanAndInstrument(sourceSets.main, [configurations.provided, configurations.runtime])
        }
    }
    
    shadowJar {
        classifier = '' // overwrite jar
        destinationDir = file("$buildDir/libs")

        from sourceSets.main.output

        configurations = [project.configurations.runtime]
        dependencies {
            include(dependency('org.ow2.asm:.*:.*'))
//            include(dependency(':high-scale-lib'))
        }
        exclude 'META-INF/INDEX.LIST'
//      exclude 'module-info.class'

        relocate 'org.objectweb.asm.', 'co.paralleluniverse.asm.'
//        relocate 'org.cliffc.high_scale_lib.', 'co.paralleluniverse.high_scale_lib.'

        manifest {
            attributes(
                "Implementation-Title"      :   project.name,
                "Implementation-Version"    :   version,
                "Implementation-Vendor"     :   vendor,
                "Automatic-Module-Name"     :   project.moduleName,
                "Premain-Class"             :   "co.paralleluniverse.fibers.instrument.JavaAgent",
                "Agent-Class"               :   "co.paralleluniverse.fibers.instrument.JavaAgent",
                "Can-Retransform-Classes"   :   "true",
                "Can-Redefine-Classes"      :   "true",
                "Built-By"                  :   System.getProperty("user.name"),
            )
        }
    }

    test {
        dependsOn = [shadowJar, compileClassloadertestJava]
        testClassesDirs = project.sourceSets.test.output.classesDirs
        classpath = project.sourceSets.test.runtimeClasspath

        project.afterEvaluate {
            jvmArgs "-javaagent:${shadowJar.archivePath}" // =vdc
        }
    }

    artifacts {
        archives shadowJar
        shadowedJar shadowJar
    }

    assemble.dependsOn shadowJar
    check.dependsOn test

    tasks.withType(JavaExec) {
        classpath += sourceSets.test.runtimeClasspath + sourceSets.test.output
    }
    run.dependsOn compileJava, testClasses

    javadoc {
        options.encoding = 'UTF-8'
        source = sourceSets.main.allJava
    }

    assemble.dependsOn shadowJar
    build.dependsOn shadowJar
    install.dependsOn shadowJar
    signArchives.dependsOn shadowJar
    uploadArchives.dependsOn shadowJar

    def installer = install.repositories.mavenInstaller
    def deployer = uploadArchives.repositories.mavenDeployer

    [installer, deployer]*.pom*.whenConfigured {
        it.dependencies.removeAll { dep ->
//          dep.artifactId.startsWith('jsr166e') ||
//          dep.artifactId.startsWith('high-scale-lib') ||
            dep.groupId == 'org.ow2.asm'
        }
    }

    if (ext) {
        artifacts {
            archives sourcesJar
            archives javadocJar
        }
    }
}

project (':quasar-actors') {
    //project.evaluationDependsOn(':quasar-core')
    
    apply plugin: 'org.javamodularity.moduleplugin'

    ext.moduleName = 'co.paralleluniverse.quasar.actors'
    
    dependencies {
        provided project(path: ':quasar-core', configuration: 'shadowedJar')
        // compile 'org.mutabilitydetector:MutabilityDetector:0.9.2'
        compile "org.slf4j:slf4j-api:1.7.25"
        compile "net.bytebuddy:byte-buddy:1.9.2"
        
        testRuntime("org.apache.logging.log4j:log4j-slf4j-impl:2.11.1") {
            exclude group: "org.slf4j", module: '*'
        }
        testRuntime "org.apache.logging.log4j:log4j-api:2.11.1"
        testRuntime "org.apache.logging.log4j:log4j-core:2.11.1"
        testRuntime "com.lmax:disruptor:3.4.2" // required for log4j
    }
}

//project (':quasar-galaxy') {
//    dependencies {
//        provided project(path: ':quasar-core', configuration: 'shadowedJar')
//        compile project(':quasar-actors')
//
//        compile ("co.paralleluniverse:galaxy:1.4")  {
//            exclude group: 'com.lmax', module: 'disruptor'
//            exclude group: 'de.javakaffee', module: 'kryo-serializers'
//            exclude group: 'com.google.guava', module: 'guava'
//            exclude group: "org.slf4j", module: '*'
//        }
//
//            testCompile ('org.gridkit.lab:telecontrol-ssh:0.7.24'){
//            exclude group: 'org.ow2.asm', module: '*'
//            exclude group: 'org.slf4j', module: '*'
//        }
//        testRuntime files(jar.archivePath)
//    }
//
//    tasks.withType(Test) {
//        systemProperty "co.paralleluniverse.quasarJar", "${quasarJar}"
//        systemProperty "jgroups.bind_addr", "127.0.0.1"
//        systemProperty "galaxy.multicast.address", "225.0.0.1"
//        systemProperty "galaxy.multicast.port", "7050"
//        systemProperty "co.paralleluniverse.galaxy.configFile", "${sourceSets.main.output.resourcesDir}/config/peer.xml"
//        systemProperty "co.paralleluniverse.galaxy.autoGoOnline", "true"
//    }
//
//    tasks.withType(JavaExec) {
//        main = mainClass
//        systemProperty "log4j.configurationFile", "${rootProject.projectDir}/log4j.xml"
//        systemProperty "Log4jContextSelector", "org.apache.logging.log4j.core.async.AsyncLoggerContextSelector"
//        // systemProperty 'co.paralleluniverse.fibers.verifyInstrumentation', 'true'
//        // systemProperty "co.paralleluniverse.io.useJDKSerialization", "true"
//        jvmArgs "-javaagent:${quasarJar}" // =v, =d
//        jvmArgs "-ea", "-XX:MaxDirectMemorySize=100M"
//        systemProperty "jgroups.bind_addr", "127.0.0.1"
//        systemProperty "galaxy.multicast.address", "225.0.0.1"
//        systemProperty "galaxy.multicast.port", "7050"
//        systemProperty "co.paralleluniverse.galaxy.configFile", "${sourceSets.main.output.resourcesDir}/config/peer.xml"
//        systemProperty "co.paralleluniverse.galaxy.autoGoOnline", "true"
//
//        // systemProperty 'co.paralleluniverse.debugMode', 'true'
//        systemProperty 'co.paralleluniverse.monitoring.flightRecorderLevel', '5'
//        systemProperty 'co.paralleluniverse.globalFlightRecorder', 'true'
//        systemProperty 'co.paralleluniverse.flightRecorderDumpFile', 'quasar-galaxy.log'
//        systemProperty 'co.paralleluniverse.monitoring.flightRecorderSize', '200000'
//    }
//}

project (':quasar-reactive-streams') {
    //project.evaluationDependsOn(':quasar-core')
    
    apply plugin: 'org.javamodularity.moduleplugin'
    ext.moduleName = 'co.paralleluniverse.quasar.reactivestreams'
    
    dependencies {
        provided project(path: ':quasar-core', configuration: 'shadowedJar')
        compile "org.reactivestreams:reactive-streams:1.0.2"
        testCompile("org.reactivestreams:reactive-streams-tck:1.0.2") {
            exclude group: "junit", module: "*"
            exclude group: "org.testng", module: "testng"
        }
        testCompile('org.testng:testng:7.0.0-beta1') {
            exclude group: "com.google.guava", module: "*"
            exclude group: "junit", module: "*"
        }
    }

    test {
        useTestNG()
    }
}

project (':quasar-disruptor') {
    //project.evaluationDependsOn(':quasar-core')
     
    apply plugin: 'org.javamodularity.moduleplugin'
    ext.moduleName = 'co.paralleluniverse.quasar.disruptor'

    dependencies {
        provided project(path: ':quasar-core', configuration: 'shadowedJar')
        compile "com.lmax:disruptor:3.4.2"
    }
}

task javadoc(type: Javadoc, dependsOn: subprojects.javadoc) {
    title = "Quasar ${project(':quasar-core').version}"
    destinationDir = file("docs/javadoc")

    source = project(':quasar-core').sourceSets.main.allJava
    source += project(':quasar-actors').sourceSets.main.allJava
    source += project(':quasar-reactive-streams').sourceSets.main.allJava

    classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })
    options {
        // docletpath = project(':quasar-core').configurations.markdownDoclet.files.asType(List)
        // doclet = 'ch.raffael.doclets.pegdown.PegdownDoclet'
        // addStringOption("parse-timeout", "10")
        // stylesheetFile = rootProject.file('./baselib/javadoc.css')
         addStringOption('Xdoclint:none')
//         addStringOption('-module-path', classpath.asPath)
//        links = [
//        "https://docs.oracle.com/en/java/javase/11/docs/api/",
//        "https://google.github.io/guava/releases/${subprojects.ext.guavaVer}/api/docs/"
//        ]
    }
    excludes = [
        "module-info.java", // for now
        "co/paralleluniverse/actors/spi/**",
        "co/paralleluniverse/actors/ActorMonitor.java",
        "co/paralleluniverse/actors/GlobalRegistry.java",
        "co/paralleluniverse/actors/JMXActorMonitor.java",
        "co/paralleluniverse/actors/LifecycleListener.java",
        "co/paralleluniverse/actors/LifecycleListenerProxy.java",
        "co/paralleluniverse/actors/MutabilityTester.java",
        "co/paralleluniverse/actors/RemoteActorProxyFactoryService.java",
        "co/paralleluniverse/actors/RemoteActorRef.java",
        "co/paralleluniverse/actors/RemoteActorProxyFactory.java",
        "co/paralleluniverse/common/benchmark/**",
        "co/paralleluniverse/common/classloader/**",
        "co/paralleluniverse/common/logging/**",
        "co/paralleluniverse/common/monitoring/**",
        "co/paralleluniverse/common/reflection/**",
        "co/paralleluniverse/common/test/**",
        "co/paralleluniverse/common/util/**",
        "co/paralleluniverse/concurrent/forkjoin/**",
        "co/paralleluniverse/concurrent/util/**",
        "co/paralleluniverse/data/record/DynamicGeneratedRecord.java",
        "co/paralleluniverse/data/record/DynamicRecord.java",
        "co/paralleluniverse/fibers/DefaultFiberPool.java",
        "co/paralleluniverse/fibers/FibersMonitor.java",
        "co/paralleluniverse/fibers/FiberTimedScheduler.java",
        "co/paralleluniverse/fibers/Instrumented.java",
        "co/paralleluniverse/fibers/NoopFibersMonitor.java",
        "co/paralleluniverse/fibers/instrument/**",
        "co/paralleluniverse/io/serialization/**",
        "co/paralleluniverse/remote/**",
        "co/paralleluniverse/strands/channels/SelectActionImpl.java",
        "co/paralleluniverse/strands/channels/disruptor/**", // not ready
        "co/paralleluniverse/strands/queues/**",
    ]
}

task clean(dependsOn: subprojects.clean) {
    doLast() {
        delete 'docs/javadoc'
    }
}

def capitalize(s) { s[0].toUpperCase() + s[1..-1].toLowerCase() }
